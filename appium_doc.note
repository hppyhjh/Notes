===appium/docs/cn/contributing-to-appium/developers-overview.md 
take all the different useful automation engines and smooth away their differences and gotchas by making Appium drivers for them and bringing them under the umbrella of Appium itself. very similar to the goal of the Selenium project. 

have every driver be an independent entity (separate repo, tests, etc...) even as it uses shared libraries that make the development of an Appium driver as simple and boilerplate-free as possible. 
use modern JavaScript because JavaScript is everywhere and easy for many developers to understand and contribute back to.

Appium team runs development according to a very lightweight version of SCRUM. Every two weeks we begin a new "sprint".
During the sprint, we update each other with daily progress in the `#standup` room in our [Appium Slack Group](https://appium.slack.com). At the end of the sprint, to celebrate our accomplishments and reflect on how things went, we hold a "retrospective", which might result in
a list of things we can try differently or do better next time around.

For project management, use [ZenHub](http://zenhub.com) browser plugin, adds various features like Kanban boards and Epics to GitHub interface.

Appium is a collection of [node.js](http://nodejs.org) packages that combine to form a running node.js server.  
Some packages (like `appium-ios-driver`) are large and add significant functionality to Appium, others play a support role.

Appium is written in a new form of JavaScript, called ES6 (or now ES2015). this version of the language is not yet supported natively by older
versions of node.js, Appium code is _transpiled_ to ES5 (the morewidely-supported version of JS).

submit a PR to one of our repos and engage with the maintainers in the review process. 
* Atomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with `git rebase -i` and squashing!
* No merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR.
* Almost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. 
Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage.

make sure you run existing tests before you begin to make changes and before you push code to be reviewed. CI set up for every Appium repository as a safety net for reviewers to know whether the code has passed muster. Running tests:
gulp                    # watch directory to re-transpile on code change, and run unit tests
gulp once               # same as above but don't watch
gulp unit-test          # transpile and run unit tests
gulp e2e-test           # transpile and run end-to-end/functional tests
_FORCE_LOGS=1 <command> # show module log output during test run
convention for unit test files to end in `-specs.js` and for e2e test files to end in `-e2e-specs.js`.

gulp.md::
[Gulp](http://gulpjs.com) is like `make` for Node.js! automate all-kinds of appium dev tasks.


===appium/docs/cn/writing-running-appium/touch-actions.md 
Selenium WebDriver spec support for certain kinds of mobile interaction, its parameters are not always easily mappable to the functionality
that the underlying device automation (like UIAutomation in the case of iOS) provides. 
Appium implements the new TouchAction / MultiAction API defined in the newest version of the spec
this is different from the earlier version of the TouchAction API in the original JSON Wire Protocol.

These APIs allow you to build up arbitrary gestures with multiple actuators.
see Appium client docs for your language in order to find examples of using this API.

*MultiTouch* objects are collections of TouchActions.

The best way to interact with the slider on Android is with TouchActions.

uiautomator2.md::
UIObject2, Unlike UiObject, UIElement is bound to a particular view instance and can become stale if the underlying view object is destroyed. 
UIAutomator 2 utilizes Gradle as a build system. Previous, UIAutomator used Maven/Ant.
Test packages produced are now APKs. Previously, UIAutomator produced .jar or .zip files. This makes UIAutomator 2 completely Android instrumentation capable.

original version of UiAutomator ran as a shell program: ```adb shell uiautomator runtest ...```
UiAutomator 2 is based on Android Instrumentation. Tests are compiled to APKs, run in an application process: ```adb shell am instrument ...```


===appium/docs/cn/appium-setup/android-hax-emulator.md ...md
runs on an Intel® cpu, check out HAXM. leverage your hardware for virtualization, accelerating the emulator.
To install HAXM open the Android SDK Manager, you will find the package under Extras. require an x86 emulator image

android-setup.md:: 
1.install Node.js (>v4)
2.install Android SDK. run 'android' tool to install > API Level 17

(run Appium from source, you will also need [Apache Ant](http://ant.apache.org/) to build the bootstrap jar that Appium uses for running against Android simulators/devices.)
到这里就配置好了。。。
run `npm install` from your Appium checkout to install all the dependencies.

Appium uses, comes prepackaged with, a project called [Selendroid](https://selendroid.io) for running Android
versions 2.3 to 4.1.  Appium switches to using Selendroid automatically when it
detects older versions

parallel_tests.md::
to automate multiple Android sessions on a single machine. All it involves is starting multiple Appium servers with different flags.

=== appium/docs/cn/contributing-to-appium/appium-from-source.md 
gulp是前端开发过程中对代码进行构建的工具

=== appium/docs/en/advanced-concepts/settings.md 
Settings: new concept introduced by appium. currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.
Control the way the appium server behaves during test automation.  not apply to controlling the app or device under test.

===appium/docs/cn/writing-running-appium/windows-app-testing.md 
Windows specific UI testing on Appium is powered by WinAppDriver, downloaded as part of Appium install.
Windows Application Driver supports testing Universal Windows Platform (UWP) and Classic Windows (Win32) apps on Windows 10 PC  --- ON PC
test UWP app, use any Selenium supported language and simply specify **Application Id** for the app under test in the **app** capabilities entry.
When testing the application you authored yourself, find the **Application Id** in the generetated `AppX\vs.appxrecipe` file under `RegisteredUserNmodeAppID` node. E.g. ```c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App
To test a classic Windows app, specify the **full executable path** for the app under test in the **app** capabilities entry.
Windows SDK provides great tool to inspect the application you are testing. see every UI element/node that you can query using Windows Application Driver. This **inspect.exe** tool can be found under the Windows SDK folder such as `C:\Program Files (x86)\Windows Kits\10\bin\x86`

===docs/en/about-appium/intro.md
#NOT do anything to be-tested APP
using vendor-provided automation frameworks under the hood. we don't need to compile in any Appium-specific or third-party code or frameworks to your app. means you're testing the same app you're shipping. The vendor-provided frameworks we use are:

#NOT locked into specific lang & framework
wrapping vendor-provided frameworks in one API, the WebDriver API. WebDriver (aka "Selenium WebDriver") specifies a client-server protocol (known as the JSON Wire Protocol). 
Given this client-server architecture, a client written in any language can be used to send the appropriate HTTP requests to the server. There are already clients written in every popular programming language. also means free to use whatever test runner and test framework you want; the client libraries are simply HTTP clients and can be mixed into your code any way you please. In other words, Appium & WebDriver clients are not technically "test frameworks" -- they are "automation libraries". 

Appium is at its heart a webserver that exposes a REST API.
can write test code in any language that has a http client API, but easier to use one of the Appium client libraries. We can put the server on a different machine than our tests are running on. We can write test code and rely on a cloud service like Sauce Labs to receive and interpret the commands.

Session & Desired Capabilities

client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#) support Appium's extensions to the WebDriver protocol. When using Appium, you want to use these client libraries instead of your regular WebDriver client. 

#NOT reinvent the wheel
WebDriver has become the de facto standard for automating web browsers, W3C Working Draft. we have extended the protocol with extra API methods useful for mobile automation.  --只是浏览器，原生应用呢

===Appium Python Client
extension library for adding Selenium 3.0 draft and Mobile JSON Wire Protocol Specification draft functionality to the Python language bindings, for use with the mobile testing framework Appium.

majority of the usage remains as it has been for Selenium 2 (WebDriver), and as the official Selenium Python bindings begins to implement the new specification that implementation will be used underneath, so test code can be written that is utilizable with both bindings.



